[project]
name = "sda-detector"
version = "0.1.0"
description = "Semantic Domain Architecture Detector - A reference SDA implementation"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
dependencies = [
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",
    "pydantic-extra-types>=2.10.0",
    "typing-extensions>=4.12.0",
]

[project.optional-dependencies]
dev = [
    # Development tooling only
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "mypy>=1.13.0",
    "ruff>=0.8.0",
    "pre-commit>=4.0.0",
    "pytest-asyncio>=0.25.0",
    "pytest-mock>=3.14.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

# ============== Ruff (Linting & Formatting) ==============
[tool.ruff]
line-length = 120
target-version = "py312"
src = ["src"]

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "RUF",  # Ruff-specific rules
    "D",    # pydocstyle (essential for domain models)
    "S",    # flake8-bandit (security)
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (let formatter handle)
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "D"]  # assert allowed in tests, no docstrings needed

[tool.ruff.lint.pydocstyle]
convention = "google"

# ============== Mypy (Type Checking) ==============
[tool.mypy]
python_version = "3.12"
mypy_path = "src"
explicit_package_bases = true
strict = true
python_executable = ".venv/bin/python"
disable_error_code = ["prop-decorator"]

# Enhanced Pydantic configuration for SDA
plugins = ["pydantic.mypy"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

# ============== Pytest ==============
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=85",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "domain: Domain model tests",
]

[dependency-groups]
dev = [
    "mypy>=1.13.0",
    "pytest>=8.0.0",
    "ruff>=0.8.0",
]
